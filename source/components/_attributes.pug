mixin attributeHeader
	.name.column
	+label({label:"Current", divObj:{class:"column"}, spanObj:{class:"column"}})
	+label({label:"Modifier", divObj:{class:"column"}, spanObj:{class:"column"}})
	+label({label:"Limit", divObj:{class:"column"}, spanObj:{class:"column"}})
	+label({label:"Trait", divObj:{class:"column"}, spanObj:{class:"column"}})

//- build an attribute row
mixin attributeRow(name)
	+label({label:name}).name

	.current-max
		//- when this is updated, must also update $affects
		+input({name:name,type:'number',trigger:{affects:[`${name}_skill_modifier`]}})
		| /
		+input({name:`${name}_max`,type:'number'})

	//- print "(" + "+" + $calculation + ")"
	+attributeSkillMod({
		name:`${name}_skill_modifier`,
		value:0,
		classAdd:' column',
		trigger:{calculation:'calcAttributeSkillMod'},
		affects:[]
		})
	
	.limit
		+input({name:`${name}_limit`,type:'number'})
	
	.trait
		+input({name:`${name}_trait`,type:'text'})
//- End mixin

//- setup a field to store the skill mod numerically while displaying something fancier
mixin attributeSkillMod({name,defaultValue,classAdd,trigger})
	span(class=`attribute-skill-mod-container${classAdd ? classAdd : ''}`)
		-
			const trueDefault = defaultValue === undefined ?
				0 :
				defaultValue;
		+hidden({name,class:'attribute-skill-mod',value:trueDefault,trigger})
		+span({class:`attribute-skill-mod-display${classAdd ? ` ${classAdd}` : ''}`,name})
			|#{trueDefault}
//- End mixin
