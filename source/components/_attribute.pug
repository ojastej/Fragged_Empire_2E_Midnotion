mixin attributeHeader
	.name.column
	+label({label:"Modifier", divObj:{class:"column"}, spanObj:{class:"column"}})
	+label({label:"Current", divObj:{class:"column"}, spanObj:{class:"column"}})
	+label({label:"Limit", divObj:{class:"column"}, spanObj:{class:"column"}})
	+label({label:"Trait", divObj:{class:"column"}, spanObj:{class:"column"}})

//- build an attribute row
mixin attributeRow(name)
	+label({label:name}).name

	-
		const trigger = {
			calculation:'calcAttributeSkillMod',
			affects: skillsByAttribute[name]
			};

	+attributeSkillMod({
		name:`${name}_skill_modifier`,
		value:0,
		classAdd:' column',
		trigger: trigger
		})
	//-	console.log ("skillsByAttribute{}", name, skillsByAttribute[name]);
	
	+currentMaxLimit({name,trigger:{affects:[`${name}_skill_modifier`]}})

	+trait({name:`${name}_trait`})
//- End mixin

//- setup a field to store the skill mod numerically while displaying something fancier
mixin attributeSkillMod({name,defaultValue,classAdd,trigger})
	span(class=`attribute-skill-mod-container${classAdd ? classAdd : ''}`)
		-
			const trueDefault = defaultValue === undefined ?
				0 :
				defaultValue;
		+hidden({name,class:'attribute-skill-mod',value:trueDefault,trigger})
		+span({class:`attribute-skill-mod-display${classAdd ? ` ${classAdd}` : ''}`,name})
			|#{trueDefault}
//- End mixin
